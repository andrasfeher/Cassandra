DROP KEYSPACE IF EXISTS mycom;

CREATE KEYSPACE mycom WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };

USE mycom;

CREATE TYPE if not exists user_address_type (
	country text,
	state text,
	city text,
	street text
);

CREATE TYPE if not exists user_full_name_type (
	title text,
	first_name text,
	middle_name text,
	last_name text
);

CREATE table IF NOT EXISTS user (
	user_id uuid primary key,
	address FROZEN<user_address_type>,
	full_name frozen<user_full_name_type>
);

CREATE table IF NOT EXISTS user_login_by_email (
	email text,
	password text,
	user_id uuid,
	username text,
	PRIMARY KEY ((email), password)
);

CREATE table IF NOT EXISTS user_login_by_username (
	username text,
	password text,
	user_id uuid,
	PRIMARY KEY ((username), password)
);

-- the uuid should be generated by the application
BEGIN BATCH
	INSERT INTO user(user_id, address, full_name) VALUES (2748806c-1ec1-4b25-b521-655eb3eeb18c, {country: 'HU',	state: 'BP', city: 'Budapest', street: 'Futo utca 47-53'}, {title: 'Mr.', first_name: 'John', last_name: 'Doe'});
	INSERT INTO user_login_by_email(email, password, user_id, username) VALUES ('jdoe@test.com', 'hashedSecret', 2748806c-1ec1-4b25-b521-655eb3eeb18c, 'jdoe');
	INSERT INTO user_login_by_username(username, password, user_id) VALUES ('jdoe', 'hashedSecret', 2748806c-1ec1-4b25-b521-655eb3eeb18c);
APPLY BATCH;


select * from user_login_by_email where email = 'jdoe@test.com';
select * from user_login_by_email where email = 'jdoe@test.com' and password = 'hashedSecret';


create type if not exists sale_product_type(
	product_id uuid,
	short_description text,
	weight int,
	unit text,
	unit_price decimal
);

create table if not exists sale(
	sale_id timeuuid primary key,
	user_id uuid,
	products  list<frozen<sale_product_type>>,
	sale_date timestamp,
	shipment_cost decimal,
	total_amount decimal
);


create type if not exists sale_product_type(
	product_id uuid,
	short_description text,
	weight int,
	unit text,
	unit_price decimal
);

create table if not exists sale(
	sale_id timeuuid primary key,
	user_id uuid,
	products  list<frozen<sale_product_type>>,
	sale_date timestamp,
	shipment_cost decimal,
	total_amount decimal
);

create materialized view IF NOT EXISTS sales_by_user as
select * from sale
where sale_id is not null and user_id is not null
primary key((user_id), sale_id) with clustering order by (sale_id desc);


create table if not exists page_hit_counter_by_url_and_date(
    url text,
    capture_date date,
    capture_time time,
    source_ip inet,
    primary key((url,capture_date), capture_time) 	
);


truncate page_hit_counter_by_url_and_date;

insert into page_hit_counter_by_url_and_date ( url, capture_date, capture_time, source_ip)
values ( 'https://msdf.com/index', '2018-04-03', '13:30:54', 	'127.0.0.1');

insert into page_hit_counter_by_url_and_date ( url, capture_date, capture_time, source_ip)
values ( 'https://msdf.com/index', '2018-04-03', '14:30:54', 	'127.0.0.1');

insert into page_hit_counter_by_url_and_date ( url, capture_date, capture_time, source_ip)
values ( 'https://msdf.com/index', '2018-04-04', '13:30:54', 	'127.0.0.1');

insert into page_hit_counter_by_url_and_date ( url, capture_date, capture_time, source_ip)
values ( 'https://msdf.com/index', '2018-04-05', '13:30:54', 	'127.0.0.1');


select * from page_hit_counter_by_url_and_date 
where url = 'https://msdf.com/index' 
and capture_date = '2018-04-03'
and capture_time > '14:00:00' and capture_time < '15:00:00';
